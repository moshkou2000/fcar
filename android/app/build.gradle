plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"

    // id "org.jetbrains.kotlin.android"
    // id "com.google.gms.google-services"
    // id "com.google.firebase.crashlytics"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = '34'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '24'
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '34'
}

android {
    namespace = "com.moshkou.fcar"
    testNamespace = "com.moshkou.fcar.test"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.moshkou.fcar"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutterMinSdkVersion.toInteger()
        targetSdk = flutterTargetSdkVersion.toInteger()
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled = true

        // TODO: get the auth redirect url from <Infra ID>
        manifestPlaceholders += ['appAuthRedirectScheme': '<Bundle ID>://oauth2/client']
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
        }
        release {
            // Build release required release signing config.
            // To make sure `flutter run --release` works, sign with the debug keys.
            // TODO: use release
            // signingConfig signingConfigs.release

            // TODO: Add your own signing config for the release build.
            signingConfig signingConfigs.debug
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions += "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }
    }

    // signingConfigs {
    //     file(rootProject.file('key.properties')).with { prop ->  
    //         if (prop.canRead()) {  
    //             release {
    //                 keyAlias prop['keyAlias']  
    //                 keyPassword prop['keyPassword']  
    //                 storeFile prop['storeFile'] ? file(prop['storeFile']) : null
    //                 storePassword prop['storePassword']  
    //             }
    //         }  
    //         else {  
    //             print('not signed')  
    //         }  
    //     }
    // }
}

flutter {
    source = "../.."
}
